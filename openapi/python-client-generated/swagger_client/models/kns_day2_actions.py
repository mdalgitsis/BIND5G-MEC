# coding: utf-8

"""
    Edge-API

    The Edge-API is built under the BIND5G project and its purpose is to act as an intermidiator between the NaaS API and the Kubernetes cluster. The NaaS API is a general API in respect of the project to remotely and automatically deploy, manage and control 5G and MEC infrastructures for a vast amount of experiments. On the other hand, the Edge-API is a specific backend API to manage Kubernetes resources and deploy application instances into the cluster.  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: mdalgitsis@vicomtech.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KNSDay2Actions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_vnf_index': 'str',
        'kdu_name': 'str',
        'additional_params': 'object'
    }

    attribute_map = {
        'member_vnf_index': 'member-vnf-index',
        'kdu_name': 'kdu-name',
        'additional_params': 'additional_params'
    }

    def __init__(self, member_vnf_index=None, kdu_name=None, additional_params=None):  # noqa: E501
        """KNSDay2Actions - a model defined in Swagger"""  # noqa: E501
        self._member_vnf_index = None
        self._kdu_name = None
        self._additional_params = None
        self.discriminator = None
        self.member_vnf_index = member_vnf_index
        self.kdu_name = kdu_name
        if additional_params is not None:
            self.additional_params = additional_params

    @property
    def member_vnf_index(self):
        """Gets the member_vnf_index of this KNSDay2Actions.  # noqa: E501


        :return: The member_vnf_index of this KNSDay2Actions.  # noqa: E501
        :rtype: str
        """
        return self._member_vnf_index

    @member_vnf_index.setter
    def member_vnf_index(self, member_vnf_index):
        """Sets the member_vnf_index of this KNSDay2Actions.


        :param member_vnf_index: The member_vnf_index of this KNSDay2Actions.  # noqa: E501
        :type: str
        """
        if member_vnf_index is None:
            raise ValueError("Invalid value for `member_vnf_index`, must not be `None`")  # noqa: E501

        self._member_vnf_index = member_vnf_index

    @property
    def kdu_name(self):
        """Gets the kdu_name of this KNSDay2Actions.  # noqa: E501


        :return: The kdu_name of this KNSDay2Actions.  # noqa: E501
        :rtype: str
        """
        return self._kdu_name

    @kdu_name.setter
    def kdu_name(self, kdu_name):
        """Sets the kdu_name of this KNSDay2Actions.


        :param kdu_name: The kdu_name of this KNSDay2Actions.  # noqa: E501
        :type: str
        """
        if kdu_name is None:
            raise ValueError("Invalid value for `kdu_name`, must not be `None`")  # noqa: E501

        self._kdu_name = kdu_name

    @property
    def additional_params(self):
        """Gets the additional_params of this KNSDay2Actions.  # noqa: E501


        :return: The additional_params of this KNSDay2Actions.  # noqa: E501
        :rtype: object
        """
        return self._additional_params

    @additional_params.setter
    def additional_params(self, additional_params):
        """Sets the additional_params of this KNSDay2Actions.


        :param additional_params: The additional_params of this KNSDay2Actions.  # noqa: E501
        :type: object
        """

        self._additional_params = additional_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KNSDay2Actions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KNSDay2Actions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
