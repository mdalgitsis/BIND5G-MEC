# coding: utf-8

"""
    Edge-API

    The Edge-API is built under the BIND5G project and its purpose is to act as an intermidiator between the NaaS API and the Kubernetes cluster. The NaaS API is a general API in respect of the project to remotely and automatically deploy, manage and control 5G and MEC infrastructures for a vast amount of experiments. On the other hand, the Edge-API is a specific backend API to manage Kubernetes resources and deploy application instances into the cluster.  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: mdalgitsis@vicomtech.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceMonitor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'servicemonitor_name': 'str',
        'servicemonitor_selector': 'object',
        'service_port_name': 'str',
        'service_path_name': 'str',
        'prometheus_release_name': 'str',
        'interval': 'str'
    }

    attribute_map = {
        'servicemonitor_name': 'servicemonitor_name',
        'servicemonitor_selector': 'servicemonitor_selector',
        'service_port_name': 'service_port_name',
        'service_path_name': 'service_path_name',
        'prometheus_release_name': 'prometheus_release_name',
        'interval': 'interval'
    }

    def __init__(self, servicemonitor_name=None, servicemonitor_selector=None, service_port_name=None, service_path_name=None, prometheus_release_name=None, interval=None):  # noqa: E501
        """ServiceMonitor - a model defined in Swagger"""  # noqa: E501
        self._servicemonitor_name = None
        self._servicemonitor_selector = None
        self._service_port_name = None
        self._service_path_name = None
        self._prometheus_release_name = None
        self._interval = None
        self.discriminator = None
        self.servicemonitor_name = servicemonitor_name
        self.servicemonitor_selector = servicemonitor_selector
        self.service_port_name = service_port_name
        self.service_path_name = service_path_name
        self.prometheus_release_name = prometheus_release_name
        self.interval = interval

    @property
    def servicemonitor_name(self):
        """Gets the servicemonitor_name of this ServiceMonitor.  # noqa: E501


        :return: The servicemonitor_name of this ServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._servicemonitor_name

    @servicemonitor_name.setter
    def servicemonitor_name(self, servicemonitor_name):
        """Sets the servicemonitor_name of this ServiceMonitor.


        :param servicemonitor_name: The servicemonitor_name of this ServiceMonitor.  # noqa: E501
        :type: str
        """
        if servicemonitor_name is None:
            raise ValueError("Invalid value for `servicemonitor_name`, must not be `None`")  # noqa: E501

        self._servicemonitor_name = servicemonitor_name

    @property
    def servicemonitor_selector(self):
        """Gets the servicemonitor_selector of this ServiceMonitor.  # noqa: E501


        :return: The servicemonitor_selector of this ServiceMonitor.  # noqa: E501
        :rtype: object
        """
        return self._servicemonitor_selector

    @servicemonitor_selector.setter
    def servicemonitor_selector(self, servicemonitor_selector):
        """Sets the servicemonitor_selector of this ServiceMonitor.


        :param servicemonitor_selector: The servicemonitor_selector of this ServiceMonitor.  # noqa: E501
        :type: object
        """
        if servicemonitor_selector is None:
            raise ValueError("Invalid value for `servicemonitor_selector`, must not be `None`")  # noqa: E501

        self._servicemonitor_selector = servicemonitor_selector

    @property
    def service_port_name(self):
        """Gets the service_port_name of this ServiceMonitor.  # noqa: E501


        :return: The service_port_name of this ServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._service_port_name

    @service_port_name.setter
    def service_port_name(self, service_port_name):
        """Sets the service_port_name of this ServiceMonitor.


        :param service_port_name: The service_port_name of this ServiceMonitor.  # noqa: E501
        :type: str
        """
        if service_port_name is None:
            raise ValueError("Invalid value for `service_port_name`, must not be `None`")  # noqa: E501

        self._service_port_name = service_port_name

    @property
    def service_path_name(self):
        """Gets the service_path_name of this ServiceMonitor.  # noqa: E501


        :return: The service_path_name of this ServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._service_path_name

    @service_path_name.setter
    def service_path_name(self, service_path_name):
        """Sets the service_path_name of this ServiceMonitor.


        :param service_path_name: The service_path_name of this ServiceMonitor.  # noqa: E501
        :type: str
        """
        if service_path_name is None:
            raise ValueError("Invalid value for `service_path_name`, must not be `None`")  # noqa: E501

        self._service_path_name = service_path_name

    @property
    def prometheus_release_name(self):
        """Gets the prometheus_release_name of this ServiceMonitor.  # noqa: E501


        :return: The prometheus_release_name of this ServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._prometheus_release_name

    @prometheus_release_name.setter
    def prometheus_release_name(self, prometheus_release_name):
        """Sets the prometheus_release_name of this ServiceMonitor.


        :param prometheus_release_name: The prometheus_release_name of this ServiceMonitor.  # noqa: E501
        :type: str
        """
        if prometheus_release_name is None:
            raise ValueError("Invalid value for `prometheus_release_name`, must not be `None`")  # noqa: E501

        self._prometheus_release_name = prometheus_release_name

    @property
    def interval(self):
        """Gets the interval of this ServiceMonitor.  # noqa: E501


        :return: The interval of this ServiceMonitor.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ServiceMonitor.


        :param interval: The interval of this ServiceMonitor.  # noqa: E501
        :type: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceMonitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceMonitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
