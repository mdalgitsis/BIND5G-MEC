# coding: utf-8

"""
    Edge-API

    The Edge-API is built under the BIND5G project and its purpose is to act as an intermidiator between the NaaS API and the Kubernetes cluster. The NaaS API is a general API in respect of the project to remotely and automatically deploy, manage and control 5G and MEC infrastructures for a vast amount of experiments. On the other hand, the Edge-API is a specific backend API to manage Kubernetes resources and deploy application instances into the cluster.  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: mdalgitsis@vicomtech.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KNS(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kns_name': 'str',
        'nsd_name': 'str',
        'vim_name': 'str',
        'k8s_namespace': 'str'
    }

    attribute_map = {
        'kns_name': 'kns_name',
        'nsd_name': 'nsd_name',
        'vim_name': 'vim_name',
        'k8s_namespace': 'k8s_namespace'
    }

    def __init__(self, kns_name=None, nsd_name=None, vim_name=None, k8s_namespace=None):  # noqa: E501
        """KNS - a model defined in Swagger"""  # noqa: E501
        self._kns_name = None
        self._nsd_name = None
        self._vim_name = None
        self._k8s_namespace = None
        self.discriminator = None
        self.kns_name = kns_name
        self.nsd_name = nsd_name
        self.vim_name = vim_name
        self.k8s_namespace = k8s_namespace

    @property
    def kns_name(self):
        """Gets the kns_name of this KNS.  # noqa: E501


        :return: The kns_name of this KNS.  # noqa: E501
        :rtype: str
        """
        return self._kns_name

    @kns_name.setter
    def kns_name(self, kns_name):
        """Sets the kns_name of this KNS.


        :param kns_name: The kns_name of this KNS.  # noqa: E501
        :type: str
        """
        if kns_name is None:
            raise ValueError("Invalid value for `kns_name`, must not be `None`")  # noqa: E501

        self._kns_name = kns_name

    @property
    def nsd_name(self):
        """Gets the nsd_name of this KNS.  # noqa: E501

        name of ns descriptor in OSM NS Packages  # noqa: E501

        :return: The nsd_name of this KNS.  # noqa: E501
        :rtype: str
        """
        return self._nsd_name

    @nsd_name.setter
    def nsd_name(self, nsd_name):
        """Sets the nsd_name of this KNS.

        name of ns descriptor in OSM NS Packages  # noqa: E501

        :param nsd_name: The nsd_name of this KNS.  # noqa: E501
        :type: str
        """
        if nsd_name is None:
            raise ValueError("Invalid value for `nsd_name`, must not be `None`")  # noqa: E501

        self._nsd_name = nsd_name

    @property
    def vim_name(self):
        """Gets the vim_name of this KNS.  # noqa: E501


        :return: The vim_name of this KNS.  # noqa: E501
        :rtype: str
        """
        return self._vim_name

    @vim_name.setter
    def vim_name(self, vim_name):
        """Sets the vim_name of this KNS.


        :param vim_name: The vim_name of this KNS.  # noqa: E501
        :type: str
        """
        if vim_name is None:
            raise ValueError("Invalid value for `vim_name`, must not be `None`")  # noqa: E501

        self._vim_name = vim_name

    @property
    def k8s_namespace(self):
        """Gets the k8s_namespace of this KNS.  # noqa: E501


        :return: The k8s_namespace of this KNS.  # noqa: E501
        :rtype: str
        """
        return self._k8s_namespace

    @k8s_namespace.setter
    def k8s_namespace(self, k8s_namespace):
        """Sets the k8s_namespace of this KNS.


        :param k8s_namespace: The k8s_namespace of this KNS.  # noqa: E501
        :type: str
        """
        if k8s_namespace is None:
            raise ValueError("Invalid value for `k8s_namespace`, must not be `None`")  # noqa: E501

        self._k8s_namespace = k8s_namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KNS, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KNS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
