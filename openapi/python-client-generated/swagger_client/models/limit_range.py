# coding: utf-8

"""
    Edge-API

    The Edge-API is built under the BIND5G project and its purpose is to act as an intermidiator between the NaaS API and the Kubernetes cluster. The NaaS API is a general API in respect of the project to remotely and automatically deploy, manage and control 5G and MEC infrastructures for a vast amount of experiments. On the other hand, the Edge-API is a specific backend API to manage Kubernetes resources and deploy application instances into the cluster.  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: mdalgitsis@vicomtech.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LimitRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limitrange_name': 'str',
        'cpu_default_limit_value': 'str',
        'memory_default_limit_value': 'str',
        'cpu_default_request_value': 'str',
        'memory_default_request_value': 'str'
    }

    attribute_map = {
        'limitrange_name': 'limitrange_name',
        'cpu_default_limit_value': 'cpu_default_limit_value',
        'memory_default_limit_value': 'memory_default_limit_value',
        'cpu_default_request_value': 'cpu_default_request_value',
        'memory_default_request_value': 'memory_default_request_value'
    }

    def __init__(self, limitrange_name=None, cpu_default_limit_value=None, memory_default_limit_value=None, cpu_default_request_value=None, memory_default_request_value=None):  # noqa: E501
        """LimitRange - a model defined in Swagger"""  # noqa: E501
        self._limitrange_name = None
        self._cpu_default_limit_value = None
        self._memory_default_limit_value = None
        self._cpu_default_request_value = None
        self._memory_default_request_value = None
        self.discriminator = None
        self.limitrange_name = limitrange_name
        self.cpu_default_limit_value = cpu_default_limit_value
        self.memory_default_limit_value = memory_default_limit_value
        self.cpu_default_request_value = cpu_default_request_value
        self.memory_default_request_value = memory_default_request_value

    @property
    def limitrange_name(self):
        """Gets the limitrange_name of this LimitRange.  # noqa: E501


        :return: The limitrange_name of this LimitRange.  # noqa: E501
        :rtype: str
        """
        return self._limitrange_name

    @limitrange_name.setter
    def limitrange_name(self, limitrange_name):
        """Sets the limitrange_name of this LimitRange.


        :param limitrange_name: The limitrange_name of this LimitRange.  # noqa: E501
        :type: str
        """
        if limitrange_name is None:
            raise ValueError("Invalid value for `limitrange_name`, must not be `None`")  # noqa: E501

        self._limitrange_name = limitrange_name

    @property
    def cpu_default_limit_value(self):
        """Gets the cpu_default_limit_value of this LimitRange.  # noqa: E501


        :return: The cpu_default_limit_value of this LimitRange.  # noqa: E501
        :rtype: str
        """
        return self._cpu_default_limit_value

    @cpu_default_limit_value.setter
    def cpu_default_limit_value(self, cpu_default_limit_value):
        """Sets the cpu_default_limit_value of this LimitRange.


        :param cpu_default_limit_value: The cpu_default_limit_value of this LimitRange.  # noqa: E501
        :type: str
        """
        if cpu_default_limit_value is None:
            raise ValueError("Invalid value for `cpu_default_limit_value`, must not be `None`")  # noqa: E501

        self._cpu_default_limit_value = cpu_default_limit_value

    @property
    def memory_default_limit_value(self):
        """Gets the memory_default_limit_value of this LimitRange.  # noqa: E501


        :return: The memory_default_limit_value of this LimitRange.  # noqa: E501
        :rtype: str
        """
        return self._memory_default_limit_value

    @memory_default_limit_value.setter
    def memory_default_limit_value(self, memory_default_limit_value):
        """Sets the memory_default_limit_value of this LimitRange.


        :param memory_default_limit_value: The memory_default_limit_value of this LimitRange.  # noqa: E501
        :type: str
        """
        if memory_default_limit_value is None:
            raise ValueError("Invalid value for `memory_default_limit_value`, must not be `None`")  # noqa: E501

        self._memory_default_limit_value = memory_default_limit_value

    @property
    def cpu_default_request_value(self):
        """Gets the cpu_default_request_value of this LimitRange.  # noqa: E501


        :return: The cpu_default_request_value of this LimitRange.  # noqa: E501
        :rtype: str
        """
        return self._cpu_default_request_value

    @cpu_default_request_value.setter
    def cpu_default_request_value(self, cpu_default_request_value):
        """Sets the cpu_default_request_value of this LimitRange.


        :param cpu_default_request_value: The cpu_default_request_value of this LimitRange.  # noqa: E501
        :type: str
        """
        if cpu_default_request_value is None:
            raise ValueError("Invalid value for `cpu_default_request_value`, must not be `None`")  # noqa: E501

        self._cpu_default_request_value = cpu_default_request_value

    @property
    def memory_default_request_value(self):
        """Gets the memory_default_request_value of this LimitRange.  # noqa: E501


        :return: The memory_default_request_value of this LimitRange.  # noqa: E501
        :rtype: str
        """
        return self._memory_default_request_value

    @memory_default_request_value.setter
    def memory_default_request_value(self, memory_default_request_value):
        """Sets the memory_default_request_value of this LimitRange.


        :param memory_default_request_value: The memory_default_request_value of this LimitRange.  # noqa: E501
        :type: str
        """
        if memory_default_request_value is None:
            raise ValueError("Invalid value for `memory_default_request_value`, must not be `None`")  # noqa: E501

        self._memory_default_request_value = memory_default_request_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LimitRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LimitRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
