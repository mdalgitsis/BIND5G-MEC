# coding: utf-8

"""
    Edge-API

    The Edge-API is built under the BIND5G project and its purpose is to act as an intermidiator between the NaaS API and the Kubernetes cluster. The NaaS API is a general API in respect of the project to remotely and automatically deploy, manage and control 5G and MEC infrastructures for a vast amount of experiments. On the other hand, the Edge-API is a specific backend API to manage Kubernetes resources and deploy application instances into the cluster.  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: mdalgitsis@vicomtech.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Deployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_name': 'str',
        'container_name': 'str',
        'image_name': 'str',
        'container_port': 'list[int]',
        'container_resource_limits_cpu_value': 'str',
        'container_resource_limits_memory_value': 'str',
        'container_resource_requests_cpu_value': 'str',
        'container_resource_requests_memory_value': 'str',
        'pod_label': 'object',
        'deployment_selector': 'object',
        'deployment_label': 'object',
        'replicas_number': 'int',
        'env': 'list[list[object]]',
        'volume_name': 'list[str]',
        'container_path': 'list[str]',
        'host_path': 'list[str]'
    }

    attribute_map = {
        'deployment_name': 'deployment_name',
        'container_name': 'container_name',
        'image_name': 'image_name',
        'container_port': 'container_port',
        'container_resource_limits_cpu_value': 'container_resource_limits_cpu_value',
        'container_resource_limits_memory_value': 'container_resource_limits_memory_value',
        'container_resource_requests_cpu_value': 'container_resource_requests_cpu_value',
        'container_resource_requests_memory_value': 'container_resource_requests_memory_value',
        'pod_label': 'pod_label',
        'deployment_selector': 'deployment_selector',
        'deployment_label': 'deployment_label',
        'replicas_number': 'replicas_number',
        'env': 'env',
        'volume_name': 'volume_name',
        'container_path': 'container_path',
        'host_path': 'host_path'
    }

    def __init__(self, deployment_name=None, container_name=None, image_name=None, container_port=None, container_resource_limits_cpu_value=None, container_resource_limits_memory_value=None, container_resource_requests_cpu_value=None, container_resource_requests_memory_value=None, pod_label=None, deployment_selector=None, deployment_label=None, replicas_number=None, env=None, volume_name=None, container_path=None, host_path=None):  # noqa: E501
        """Deployment - a model defined in Swagger"""  # noqa: E501
        self._deployment_name = None
        self._container_name = None
        self._image_name = None
        self._container_port = None
        self._container_resource_limits_cpu_value = None
        self._container_resource_limits_memory_value = None
        self._container_resource_requests_cpu_value = None
        self._container_resource_requests_memory_value = None
        self._pod_label = None
        self._deployment_selector = None
        self._deployment_label = None
        self._replicas_number = None
        self._env = None
        self._volume_name = None
        self._container_path = None
        self._host_path = None
        self.discriminator = None
        self.deployment_name = deployment_name
        self.container_name = container_name
        self.image_name = image_name
        self.container_port = container_port
        if container_resource_limits_cpu_value is not None:
            self.container_resource_limits_cpu_value = container_resource_limits_cpu_value
        if container_resource_limits_memory_value is not None:
            self.container_resource_limits_memory_value = container_resource_limits_memory_value
        if container_resource_requests_cpu_value is not None:
            self.container_resource_requests_cpu_value = container_resource_requests_cpu_value
        if container_resource_requests_memory_value is not None:
            self.container_resource_requests_memory_value = container_resource_requests_memory_value
        self.pod_label = pod_label
        self.deployment_selector = deployment_selector
        if deployment_label is not None:
            self.deployment_label = deployment_label
        if replicas_number is not None:
            self.replicas_number = replicas_number
        if env is not None:
            self.env = env
        if volume_name is not None:
            self.volume_name = volume_name
        if container_path is not None:
            self.container_path = container_path
        if host_path is not None:
            self.host_path = host_path

    @property
    def deployment_name(self):
        """Gets the deployment_name of this Deployment.  # noqa: E501


        :return: The deployment_name of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """Sets the deployment_name of this Deployment.


        :param deployment_name: The deployment_name of this Deployment.  # noqa: E501
        :type: str
        """
        if deployment_name is None:
            raise ValueError("Invalid value for `deployment_name`, must not be `None`")  # noqa: E501

        self._deployment_name = deployment_name

    @property
    def container_name(self):
        """Gets the container_name of this Deployment.  # noqa: E501


        :return: The container_name of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this Deployment.


        :param container_name: The container_name of this Deployment.  # noqa: E501
        :type: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")  # noqa: E501

        self._container_name = container_name

    @property
    def image_name(self):
        """Gets the image_name of this Deployment.  # noqa: E501


        :return: The image_name of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this Deployment.


        :param image_name: The image_name of this Deployment.  # noqa: E501
        :type: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")  # noqa: E501

        self._image_name = image_name

    @property
    def container_port(self):
        """Gets the container_port of this Deployment.  # noqa: E501


        :return: The container_port of this Deployment.  # noqa: E501
        :rtype: list[int]
        """
        return self._container_port

    @container_port.setter
    def container_port(self, container_port):
        """Sets the container_port of this Deployment.


        :param container_port: The container_port of this Deployment.  # noqa: E501
        :type: list[int]
        """
        if container_port is None:
            raise ValueError("Invalid value for `container_port`, must not be `None`")  # noqa: E501

        self._container_port = container_port

    @property
    def container_resource_limits_cpu_value(self):
        """Gets the container_resource_limits_cpu_value of this Deployment.  # noqa: E501

        CPU resources are measured in milLiCPU units  # noqa: E501

        :return: The container_resource_limits_cpu_value of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._container_resource_limits_cpu_value

    @container_resource_limits_cpu_value.setter
    def container_resource_limits_cpu_value(self, container_resource_limits_cpu_value):
        """Sets the container_resource_limits_cpu_value of this Deployment.

        CPU resources are measured in milLiCPU units  # noqa: E501

        :param container_resource_limits_cpu_value: The container_resource_limits_cpu_value of this Deployment.  # noqa: E501
        :type: str
        """

        self._container_resource_limits_cpu_value = container_resource_limits_cpu_value

    @property
    def container_resource_limits_memory_value(self):
        """Gets the container_resource_limits_memory_value of this Deployment.  # noqa: E501

        Memory is measured in bytes.  # noqa: E501

        :return: The container_resource_limits_memory_value of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._container_resource_limits_memory_value

    @container_resource_limits_memory_value.setter
    def container_resource_limits_memory_value(self, container_resource_limits_memory_value):
        """Sets the container_resource_limits_memory_value of this Deployment.

        Memory is measured in bytes.  # noqa: E501

        :param container_resource_limits_memory_value: The container_resource_limits_memory_value of this Deployment.  # noqa: E501
        :type: str
        """

        self._container_resource_limits_memory_value = container_resource_limits_memory_value

    @property
    def container_resource_requests_cpu_value(self):
        """Gets the container_resource_requests_cpu_value of this Deployment.  # noqa: E501

        CPU resources are measured in milLiCPU units  # noqa: E501

        :return: The container_resource_requests_cpu_value of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._container_resource_requests_cpu_value

    @container_resource_requests_cpu_value.setter
    def container_resource_requests_cpu_value(self, container_resource_requests_cpu_value):
        """Sets the container_resource_requests_cpu_value of this Deployment.

        CPU resources are measured in milLiCPU units  # noqa: E501

        :param container_resource_requests_cpu_value: The container_resource_requests_cpu_value of this Deployment.  # noqa: E501
        :type: str
        """

        self._container_resource_requests_cpu_value = container_resource_requests_cpu_value

    @property
    def container_resource_requests_memory_value(self):
        """Gets the container_resource_requests_memory_value of this Deployment.  # noqa: E501

        Memory is measured in bytes.  # noqa: E501

        :return: The container_resource_requests_memory_value of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._container_resource_requests_memory_value

    @container_resource_requests_memory_value.setter
    def container_resource_requests_memory_value(self, container_resource_requests_memory_value):
        """Sets the container_resource_requests_memory_value of this Deployment.

        Memory is measured in bytes.  # noqa: E501

        :param container_resource_requests_memory_value: The container_resource_requests_memory_value of this Deployment.  # noqa: E501
        :type: str
        """

        self._container_resource_requests_memory_value = container_resource_requests_memory_value

    @property
    def pod_label(self):
        """Gets the pod_label of this Deployment.  # noqa: E501


        :return: The pod_label of this Deployment.  # noqa: E501
        :rtype: object
        """
        return self._pod_label

    @pod_label.setter
    def pod_label(self, pod_label):
        """Sets the pod_label of this Deployment.


        :param pod_label: The pod_label of this Deployment.  # noqa: E501
        :type: object
        """
        if pod_label is None:
            raise ValueError("Invalid value for `pod_label`, must not be `None`")  # noqa: E501

        self._pod_label = pod_label

    @property
    def deployment_selector(self):
        """Gets the deployment_selector of this Deployment.  # noqa: E501


        :return: The deployment_selector of this Deployment.  # noqa: E501
        :rtype: object
        """
        return self._deployment_selector

    @deployment_selector.setter
    def deployment_selector(self, deployment_selector):
        """Sets the deployment_selector of this Deployment.


        :param deployment_selector: The deployment_selector of this Deployment.  # noqa: E501
        :type: object
        """
        if deployment_selector is None:
            raise ValueError("Invalid value for `deployment_selector`, must not be `None`")  # noqa: E501

        self._deployment_selector = deployment_selector

    @property
    def deployment_label(self):
        """Gets the deployment_label of this Deployment.  # noqa: E501


        :return: The deployment_label of this Deployment.  # noqa: E501
        :rtype: object
        """
        return self._deployment_label

    @deployment_label.setter
    def deployment_label(self, deployment_label):
        """Sets the deployment_label of this Deployment.


        :param deployment_label: The deployment_label of this Deployment.  # noqa: E501
        :type: object
        """

        self._deployment_label = deployment_label

    @property
    def replicas_number(self):
        """Gets the replicas_number of this Deployment.  # noqa: E501


        :return: The replicas_number of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._replicas_number

    @replicas_number.setter
    def replicas_number(self, replicas_number):
        """Sets the replicas_number of this Deployment.


        :param replicas_number: The replicas_number of this Deployment.  # noqa: E501
        :type: int
        """

        self._replicas_number = replicas_number

    @property
    def env(self):
        """Gets the env of this Deployment.  # noqa: E501


        :return: The env of this Deployment.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Deployment.


        :param env: The env of this Deployment.  # noqa: E501
        :type: list[list[object]]
        """

        self._env = env

    @property
    def volume_name(self):
        """Gets the volume_name of this Deployment.  # noqa: E501


        :return: The volume_name of this Deployment.  # noqa: E501
        :rtype: list[str]
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this Deployment.


        :param volume_name: The volume_name of this Deployment.  # noqa: E501
        :type: list[str]
        """

        self._volume_name = volume_name

    @property
    def container_path(self):
        """Gets the container_path of this Deployment.  # noqa: E501


        :return: The container_path of this Deployment.  # noqa: E501
        :rtype: list[str]
        """
        return self._container_path

    @container_path.setter
    def container_path(self, container_path):
        """Sets the container_path of this Deployment.


        :param container_path: The container_path of this Deployment.  # noqa: E501
        :type: list[str]
        """

        self._container_path = container_path

    @property
    def host_path(self):
        """Gets the host_path of this Deployment.  # noqa: E501


        :return: The host_path of this Deployment.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_path

    @host_path.setter
    def host_path(self, host_path):
        """Sets the host_path of this Deployment.


        :param host_path: The host_path of this Deployment.  # noqa: E501
        :type: list[str]
        """

        self._host_path = host_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Deployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
