# coding: utf-8

"""
    Edge-API

    The Edge-API is built under the BIND5G project and its purpose is to act as an intermidiator between the NaaS API and the Kubernetes cluster. The NaaS API is a general API in respect of the project to remotely and automatically deploy, manage and control 5G and MEC infrastructures for a vast amount of experiments. On the other hand, the Edge-API is a specific backend API to manage Kubernetes resources and deploy application instances into the cluster.  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: mdalgitsis@vicomtech.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class KubernetesNetworkServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_kns(self, body, **kwargs):  # noqa: E501
        """Create a Kubernetes Network Service  # noqa: E501

        Create a KNS in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_kns(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KNS body: Body request that contains the key-value pairs to create a KNS. **Note:** a note comes here (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_kns_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_kns_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_kns_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Kubernetes Network Service  # noqa: E501

        Create a KNS in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_kns_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KNS body: Body request that contains the key-value pairs to create a KNS. **Note:** a note comes here (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_kns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_kns`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_kns(self, kns_name, **kwargs):  # noqa: E501
        """Delete a Kubernetes Network Service  # noqa: E501

        Delete a KNS in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kns(kns_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kns_name: Name of the KNS (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_kns_with_http_info(kns_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_kns_with_http_info(kns_name, **kwargs)  # noqa: E501
            return data

    def delete_kns_with_http_info(self, kns_name, **kwargs):  # noqa: E501
        """Delete a Kubernetes Network Service  # noqa: E501

        Delete a KNS in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_kns_with_http_info(kns_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kns_name: Name of the KNS (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['kns_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_kns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'kns_name' is set
        if ('kns_name' not in params or
                params['kns_name'] is None):
            raise ValueError("Missing the required parameter `kns_name` when calling `delete_kns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kns_name' in params:
            path_params['kns_name'] = params['kns_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kns/{kns_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_kns(self, **kwargs):  # noqa: E501
        """List Kubernetes Network Services  # noqa: E501

        Returns a list with all the KNS running in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_kns(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_kns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_kns_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_kns_with_http_info(self, **kwargs):  # noqa: E501
        """List Kubernetes Network Services  # noqa: E501

        Returns a list with all the KNS running in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_kns_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_kns" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kns(self, kns_name, **kwargs):  # noqa: E501
        """Get a Kubernetes Network Service  # noqa: E501

        Returns a KNS running in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kns(kns_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kns_name: Name of the KNS (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_kns_with_http_info(kns_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_kns_with_http_info(kns_name, **kwargs)  # noqa: E501
            return data

    def get_kns_with_http_info(self, kns_name, **kwargs):  # noqa: E501
        """Get a Kubernetes Network Service  # noqa: E501

        Returns a KNS running in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kns_with_http_info(kns_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str kns_name: Name of the KNS (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['kns_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'kns_name' is set
        if ('kns_name' not in params or
                params['kns_name'] is None):
            raise ValueError("Missing the required parameter `kns_name` when calling `get_kns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kns_name' in params:
            path_params['kns_name'] = params['kns_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kns/{kns_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_kns(self, body, nsd_name, vim_name, k8s_namespace, kns_name, **kwargs):  # noqa: E501
        """Day2Actions in a Kubernetes Network Service  # noqa: E501

        Performs Day2Actions in a KNS in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kns(body, nsd_name, vim_name, k8s_namespace, kns_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KNSDay2Actions body: Body request that contains the key-value pairs to update a KNS. **Note:** a note comes here (required)
        :param str nsd_name: Name of the ND Descriptor (required)
        :param str vim_name: Name of the VIM (required)
        :param str k8s_namespace: Name of the Namespace in Kubernetes (K8s) (required)
        :param str kns_name: Name of the KNS (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_kns_with_http_info(body, nsd_name, vim_name, k8s_namespace, kns_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_kns_with_http_info(body, nsd_name, vim_name, k8s_namespace, kns_name, **kwargs)  # noqa: E501
            return data

    def update_kns_with_http_info(self, body, nsd_name, vim_name, k8s_namespace, kns_name, **kwargs):  # noqa: E501
        """Day2Actions in a Kubernetes Network Service  # noqa: E501

        Performs Day2Actions in a KNS in OSM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_kns_with_http_info(body, nsd_name, vim_name, k8s_namespace, kns_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KNSDay2Actions body: Body request that contains the key-value pairs to update a KNS. **Note:** a note comes here (required)
        :param str nsd_name: Name of the ND Descriptor (required)
        :param str vim_name: Name of the VIM (required)
        :param str k8s_namespace: Name of the Namespace in Kubernetes (K8s) (required)
        :param str kns_name: Name of the KNS (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'nsd_name', 'vim_name', 'k8s_namespace', 'kns_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_kns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_kns`")  # noqa: E501
        # verify the required parameter 'nsd_name' is set
        if ('nsd_name' not in params or
                params['nsd_name'] is None):
            raise ValueError("Missing the required parameter `nsd_name` when calling `update_kns`")  # noqa: E501
        # verify the required parameter 'vim_name' is set
        if ('vim_name' not in params or
                params['vim_name'] is None):
            raise ValueError("Missing the required parameter `vim_name` when calling `update_kns`")  # noqa: E501
        # verify the required parameter 'k8s_namespace' is set
        if ('k8s_namespace' not in params or
                params['k8s_namespace'] is None):
            raise ValueError("Missing the required parameter `k8s_namespace` when calling `update_kns`")  # noqa: E501
        # verify the required parameter 'kns_name' is set
        if ('kns_name' not in params or
                params['kns_name'] is None):
            raise ValueError("Missing the required parameter `kns_name` when calling `update_kns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'kns_name' in params:
            path_params['kns_name'] = params['kns_name']  # noqa: E501

        query_params = []
        if 'nsd_name' in params:
            query_params.append(('nsd_name', params['nsd_name']))  # noqa: E501
        if 'vim_name' in params:
            query_params.append(('vim_name', params['vim_name']))  # noqa: E501
        if 'k8s_namespace' in params:
            query_params.append(('k8s_namespace', params['k8s_namespace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kns/{kns_name}/day2actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
