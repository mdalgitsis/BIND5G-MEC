# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Service(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, service_name: str=None, service_selector: object=None, service_label: object=None, service_port: List[List[object]]=None, service_type: str=None):  # noqa: E501
        """Service - a model defined in Swagger

        :param service_name: The service_name of this Service.  # noqa: E501
        :type service_name: str
        :param service_selector: The service_selector of this Service.  # noqa: E501
        :type service_selector: object
        :param service_label: The service_label of this Service.  # noqa: E501
        :type service_label: object
        :param service_port: The service_port of this Service.  # noqa: E501
        :type service_port: List[List[object]]
        :param service_type: The service_type of this Service.  # noqa: E501
        :type service_type: str
        """
        self.swagger_types = {
            'service_name': str,
            'service_selector': object,
            'service_label': object,
            'service_port': List[List[object]],
            'service_type': str
        }

        self.attribute_map = {
            'service_name': 'service_name',
            'service_selector': 'service_selector',
            'service_label': 'service_label',
            'service_port': 'service_port',
            'service_type': 'service_type'
        }
        self._service_name = service_name
        self._service_selector = service_selector
        self._service_label = service_label
        self._service_port = service_port
        self._service_type = service_type

    @classmethod
    def from_dict(cls, dikt) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Service of this Service.  # noqa: E501
        :rtype: Service
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self) -> str:
        """Gets the service_name of this Service.


        :return: The service_name of this Service.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name: str):
        """Sets the service_name of this Service.


        :param service_name: The service_name of this Service.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def service_selector(self) -> object:
        """Gets the service_selector of this Service.


        :return: The service_selector of this Service.
        :rtype: object
        """
        return self._service_selector

    @service_selector.setter
    def service_selector(self, service_selector: object):
        """Sets the service_selector of this Service.


        :param service_selector: The service_selector of this Service.
        :type service_selector: object
        """
        if service_selector is None:
            raise ValueError("Invalid value for `service_selector`, must not be `None`")  # noqa: E501

        self._service_selector = service_selector

    @property
    def service_label(self) -> object:
        """Gets the service_label of this Service.


        :return: The service_label of this Service.
        :rtype: object
        """
        return self._service_label

    @service_label.setter
    def service_label(self, service_label: object):
        """Sets the service_label of this Service.


        :param service_label: The service_label of this Service.
        :type service_label: object
        """

        self._service_label = service_label

    @property
    def service_port(self) -> List[List[object]]:
        """Gets the service_port of this Service.


        :return: The service_port of this Service.
        :rtype: List[List[object]]
        """
        return self._service_port

    @service_port.setter
    def service_port(self, service_port: List[List[object]]):
        """Sets the service_port of this Service.


        :param service_port: The service_port of this Service.
        :type service_port: List[List[object]]
        """
        if service_port is None:
            raise ValueError("Invalid value for `service_port`, must not be `None`")  # noqa: E501

        self._service_port = service_port

    @property
    def service_type(self) -> str:
        """Gets the service_type of this Service.

        Service types  # noqa: E501

        :return: The service_type of this Service.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type: str):
        """Sets the service_type of this Service.

        Service types  # noqa: E501

        :param service_type: The service_type of this Service.
        :type service_type: str
        """
        allowed_values = ["ClusterIP", "LoadBalancer", "Ingress", "NodePort"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"
                .format(service_type, allowed_values)
            )

        self._service_type = service_type
