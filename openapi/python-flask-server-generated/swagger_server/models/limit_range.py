# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LimitRange(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, limitrange_name: str=None, cpu_default_limit_value: str=None, memory_default_limit_value: str=None, cpu_default_request_value: str=None, memory_default_request_value: str=None):  # noqa: E501
        """LimitRange - a model defined in Swagger

        :param limitrange_name: The limitrange_name of this LimitRange.  # noqa: E501
        :type limitrange_name: str
        :param cpu_default_limit_value: The cpu_default_limit_value of this LimitRange.  # noqa: E501
        :type cpu_default_limit_value: str
        :param memory_default_limit_value: The memory_default_limit_value of this LimitRange.  # noqa: E501
        :type memory_default_limit_value: str
        :param cpu_default_request_value: The cpu_default_request_value of this LimitRange.  # noqa: E501
        :type cpu_default_request_value: str
        :param memory_default_request_value: The memory_default_request_value of this LimitRange.  # noqa: E501
        :type memory_default_request_value: str
        """
        self.swagger_types = {
            'limitrange_name': str,
            'cpu_default_limit_value': str,
            'memory_default_limit_value': str,
            'cpu_default_request_value': str,
            'memory_default_request_value': str
        }

        self.attribute_map = {
            'limitrange_name': 'limitrange_name',
            'cpu_default_limit_value': 'cpu_default_limit_value',
            'memory_default_limit_value': 'memory_default_limit_value',
            'cpu_default_request_value': 'cpu_default_request_value',
            'memory_default_request_value': 'memory_default_request_value'
        }
        self._limitrange_name = limitrange_name
        self._cpu_default_limit_value = cpu_default_limit_value
        self._memory_default_limit_value = memory_default_limit_value
        self._cpu_default_request_value = cpu_default_request_value
        self._memory_default_request_value = memory_default_request_value

    @classmethod
    def from_dict(cls, dikt) -> 'LimitRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LimitRange of this LimitRange.  # noqa: E501
        :rtype: LimitRange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limitrange_name(self) -> str:
        """Gets the limitrange_name of this LimitRange.


        :return: The limitrange_name of this LimitRange.
        :rtype: str
        """
        return self._limitrange_name

    @limitrange_name.setter
    def limitrange_name(self, limitrange_name: str):
        """Sets the limitrange_name of this LimitRange.


        :param limitrange_name: The limitrange_name of this LimitRange.
        :type limitrange_name: str
        """
        if limitrange_name is None:
            raise ValueError("Invalid value for `limitrange_name`, must not be `None`")  # noqa: E501

        self._limitrange_name = limitrange_name

    @property
    def cpu_default_limit_value(self) -> str:
        """Gets the cpu_default_limit_value of this LimitRange.


        :return: The cpu_default_limit_value of this LimitRange.
        :rtype: str
        """
        return self._cpu_default_limit_value

    @cpu_default_limit_value.setter
    def cpu_default_limit_value(self, cpu_default_limit_value: str):
        """Sets the cpu_default_limit_value of this LimitRange.


        :param cpu_default_limit_value: The cpu_default_limit_value of this LimitRange.
        :type cpu_default_limit_value: str
        """
        if cpu_default_limit_value is None:
            raise ValueError("Invalid value for `cpu_default_limit_value`, must not be `None`")  # noqa: E501

        self._cpu_default_limit_value = cpu_default_limit_value

    @property
    def memory_default_limit_value(self) -> str:
        """Gets the memory_default_limit_value of this LimitRange.


        :return: The memory_default_limit_value of this LimitRange.
        :rtype: str
        """
        return self._memory_default_limit_value

    @memory_default_limit_value.setter
    def memory_default_limit_value(self, memory_default_limit_value: str):
        """Sets the memory_default_limit_value of this LimitRange.


        :param memory_default_limit_value: The memory_default_limit_value of this LimitRange.
        :type memory_default_limit_value: str
        """
        if memory_default_limit_value is None:
            raise ValueError("Invalid value for `memory_default_limit_value`, must not be `None`")  # noqa: E501

        self._memory_default_limit_value = memory_default_limit_value

    @property
    def cpu_default_request_value(self) -> str:
        """Gets the cpu_default_request_value of this LimitRange.


        :return: The cpu_default_request_value of this LimitRange.
        :rtype: str
        """
        return self._cpu_default_request_value

    @cpu_default_request_value.setter
    def cpu_default_request_value(self, cpu_default_request_value: str):
        """Sets the cpu_default_request_value of this LimitRange.


        :param cpu_default_request_value: The cpu_default_request_value of this LimitRange.
        :type cpu_default_request_value: str
        """
        if cpu_default_request_value is None:
            raise ValueError("Invalid value for `cpu_default_request_value`, must not be `None`")  # noqa: E501

        self._cpu_default_request_value = cpu_default_request_value

    @property
    def memory_default_request_value(self) -> str:
        """Gets the memory_default_request_value of this LimitRange.


        :return: The memory_default_request_value of this LimitRange.
        :rtype: str
        """
        return self._memory_default_request_value

    @memory_default_request_value.setter
    def memory_default_request_value(self, memory_default_request_value: str):
        """Sets the memory_default_request_value of this LimitRange.


        :param memory_default_request_value: The memory_default_request_value of this LimitRange.
        :type memory_default_request_value: str
        """
        if memory_default_request_value is None:
            raise ValueError("Invalid value for `memory_default_request_value`, must not be `None`")  # noqa: E501

        self._memory_default_request_value = memory_default_request_value
