# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class KNS(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, kns_name: str=None, nsd_name: str=None, vim_name: str=None, k8s_namespace: str=None):  # noqa: E501
        """KNS - a model defined in Swagger

        :param kns_name: The kns_name of this KNS.  # noqa: E501
        :type kns_name: str
        :param nsd_name: The nsd_name of this KNS.  # noqa: E501
        :type nsd_name: str
        :param vim_name: The vim_name of this KNS.  # noqa: E501
        :type vim_name: str
        :param k8s_namespace: The k8s_namespace of this KNS.  # noqa: E501
        :type k8s_namespace: str
        """
        self.swagger_types = {
            'kns_name': str,
            'nsd_name': str,
            'vim_name': str,
            'k8s_namespace': str
        }

        self.attribute_map = {
            'kns_name': 'kns_name',
            'nsd_name': 'nsd_name',
            'vim_name': 'vim_name',
            'k8s_namespace': 'k8s_namespace'
        }
        self._kns_name = kns_name
        self._nsd_name = nsd_name
        self._vim_name = vim_name
        self._k8s_namespace = k8s_namespace

    @classmethod
    def from_dict(cls, dikt) -> 'KNS':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The KNS of this KNS.  # noqa: E501
        :rtype: KNS
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kns_name(self) -> str:
        """Gets the kns_name of this KNS.


        :return: The kns_name of this KNS.
        :rtype: str
        """
        return self._kns_name

    @kns_name.setter
    def kns_name(self, kns_name: str):
        """Sets the kns_name of this KNS.


        :param kns_name: The kns_name of this KNS.
        :type kns_name: str
        """
        if kns_name is None:
            raise ValueError("Invalid value for `kns_name`, must not be `None`")  # noqa: E501

        self._kns_name = kns_name

    @property
    def nsd_name(self) -> str:
        """Gets the nsd_name of this KNS.

        name of ns descriptor in OSM NS Packages  # noqa: E501

        :return: The nsd_name of this KNS.
        :rtype: str
        """
        return self._nsd_name

    @nsd_name.setter
    def nsd_name(self, nsd_name: str):
        """Sets the nsd_name of this KNS.

        name of ns descriptor in OSM NS Packages  # noqa: E501

        :param nsd_name: The nsd_name of this KNS.
        :type nsd_name: str
        """
        if nsd_name is None:
            raise ValueError("Invalid value for `nsd_name`, must not be `None`")  # noqa: E501

        self._nsd_name = nsd_name

    @property
    def vim_name(self) -> str:
        """Gets the vim_name of this KNS.


        :return: The vim_name of this KNS.
        :rtype: str
        """
        return self._vim_name

    @vim_name.setter
    def vim_name(self, vim_name: str):
        """Sets the vim_name of this KNS.


        :param vim_name: The vim_name of this KNS.
        :type vim_name: str
        """
        if vim_name is None:
            raise ValueError("Invalid value for `vim_name`, must not be `None`")  # noqa: E501

        self._vim_name = vim_name

    @property
    def k8s_namespace(self) -> str:
        """Gets the k8s_namespace of this KNS.


        :return: The k8s_namespace of this KNS.
        :rtype: str
        """
        return self._k8s_namespace

    @k8s_namespace.setter
    def k8s_namespace(self, k8s_namespace: str):
        """Sets the k8s_namespace of this KNS.


        :param k8s_namespace: The k8s_namespace of this KNS.
        :type k8s_namespace: str
        """
        if k8s_namespace is None:
            raise ValueError("Invalid value for `k8s_namespace`, must not be `None`")  # noqa: E501

        self._k8s_namespace = k8s_namespace
