# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ServiceMonitor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, servicemonitor_name: str=None, servicemonitor_selector: object=None, service_port_name: str=None, service_path_name: str=None, prometheus_release_name: str=None, interval: str=None):  # noqa: E501
        """ServiceMonitor - a model defined in Swagger

        :param servicemonitor_name: The servicemonitor_name of this ServiceMonitor.  # noqa: E501
        :type servicemonitor_name: str
        :param servicemonitor_selector: The servicemonitor_selector of this ServiceMonitor.  # noqa: E501
        :type servicemonitor_selector: object
        :param service_port_name: The service_port_name of this ServiceMonitor.  # noqa: E501
        :type service_port_name: str
        :param service_path_name: The service_path_name of this ServiceMonitor.  # noqa: E501
        :type service_path_name: str
        :param prometheus_release_name: The prometheus_release_name of this ServiceMonitor.  # noqa: E501
        :type prometheus_release_name: str
        :param interval: The interval of this ServiceMonitor.  # noqa: E501
        :type interval: str
        """
        self.swagger_types = {
            'servicemonitor_name': str,
            'servicemonitor_selector': object,
            'service_port_name': str,
            'service_path_name': str,
            'prometheus_release_name': str,
            'interval': str
        }

        self.attribute_map = {
            'servicemonitor_name': 'servicemonitor_name',
            'servicemonitor_selector': 'servicemonitor_selector',
            'service_port_name': 'service_port_name',
            'service_path_name': 'service_path_name',
            'prometheus_release_name': 'prometheus_release_name',
            'interval': 'interval'
        }
        self._servicemonitor_name = servicemonitor_name
        self._servicemonitor_selector = servicemonitor_selector
        self._service_port_name = service_port_name
        self._service_path_name = service_path_name
        self._prometheus_release_name = prometheus_release_name
        self._interval = interval

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceMonitor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceMonitor of this ServiceMonitor.  # noqa: E501
        :rtype: ServiceMonitor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def servicemonitor_name(self) -> str:
        """Gets the servicemonitor_name of this ServiceMonitor.


        :return: The servicemonitor_name of this ServiceMonitor.
        :rtype: str
        """
        return self._servicemonitor_name

    @servicemonitor_name.setter
    def servicemonitor_name(self, servicemonitor_name: str):
        """Sets the servicemonitor_name of this ServiceMonitor.


        :param servicemonitor_name: The servicemonitor_name of this ServiceMonitor.
        :type servicemonitor_name: str
        """
        if servicemonitor_name is None:
            raise ValueError("Invalid value for `servicemonitor_name`, must not be `None`")  # noqa: E501

        self._servicemonitor_name = servicemonitor_name

    @property
    def servicemonitor_selector(self) -> object:
        """Gets the servicemonitor_selector of this ServiceMonitor.


        :return: The servicemonitor_selector of this ServiceMonitor.
        :rtype: object
        """
        return self._servicemonitor_selector

    @servicemonitor_selector.setter
    def servicemonitor_selector(self, servicemonitor_selector: object):
        """Sets the servicemonitor_selector of this ServiceMonitor.


        :param servicemonitor_selector: The servicemonitor_selector of this ServiceMonitor.
        :type servicemonitor_selector: object
        """
        if servicemonitor_selector is None:
            raise ValueError("Invalid value for `servicemonitor_selector`, must not be `None`")  # noqa: E501

        self._servicemonitor_selector = servicemonitor_selector

    @property
    def service_port_name(self) -> str:
        """Gets the service_port_name of this ServiceMonitor.


        :return: The service_port_name of this ServiceMonitor.
        :rtype: str
        """
        return self._service_port_name

    @service_port_name.setter
    def service_port_name(self, service_port_name: str):
        """Sets the service_port_name of this ServiceMonitor.


        :param service_port_name: The service_port_name of this ServiceMonitor.
        :type service_port_name: str
        """
        if service_port_name is None:
            raise ValueError("Invalid value for `service_port_name`, must not be `None`")  # noqa: E501

        self._service_port_name = service_port_name

    @property
    def service_path_name(self) -> str:
        """Gets the service_path_name of this ServiceMonitor.


        :return: The service_path_name of this ServiceMonitor.
        :rtype: str
        """
        return self._service_path_name

    @service_path_name.setter
    def service_path_name(self, service_path_name: str):
        """Sets the service_path_name of this ServiceMonitor.


        :param service_path_name: The service_path_name of this ServiceMonitor.
        :type service_path_name: str
        """
        if service_path_name is None:
            raise ValueError("Invalid value for `service_path_name`, must not be `None`")  # noqa: E501

        self._service_path_name = service_path_name

    @property
    def prometheus_release_name(self) -> str:
        """Gets the prometheus_release_name of this ServiceMonitor.


        :return: The prometheus_release_name of this ServiceMonitor.
        :rtype: str
        """
        return self._prometheus_release_name

    @prometheus_release_name.setter
    def prometheus_release_name(self, prometheus_release_name: str):
        """Sets the prometheus_release_name of this ServiceMonitor.


        :param prometheus_release_name: The prometheus_release_name of this ServiceMonitor.
        :type prometheus_release_name: str
        """
        if prometheus_release_name is None:
            raise ValueError("Invalid value for `prometheus_release_name`, must not be `None`")  # noqa: E501

        self._prometheus_release_name = prometheus_release_name

    @property
    def interval(self) -> str:
        """Gets the interval of this ServiceMonitor.


        :return: The interval of this ServiceMonitor.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval: str):
        """Sets the interval of this ServiceMonitor.


        :param interval: The interval of this ServiceMonitor.
        :type interval: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval
