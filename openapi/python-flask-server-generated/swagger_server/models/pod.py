# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Pod(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pod_name: str=None, container_name: str=None, image_name: str=None):  # noqa: E501
        """Pod - a model defined in Swagger

        :param pod_name: The pod_name of this Pod.  # noqa: E501
        :type pod_name: str
        :param container_name: The container_name of this Pod.  # noqa: E501
        :type container_name: str
        :param image_name: The image_name of this Pod.  # noqa: E501
        :type image_name: str
        """
        self.swagger_types = {
            'pod_name': str,
            'container_name': str,
            'image_name': str
        }

        self.attribute_map = {
            'pod_name': 'pod_name',
            'container_name': 'container_name',
            'image_name': 'image_name'
        }
        self._pod_name = pod_name
        self._container_name = container_name
        self._image_name = image_name

    @classmethod
    def from_dict(cls, dikt) -> 'Pod':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pod of this Pod.  # noqa: E501
        :rtype: Pod
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pod_name(self) -> str:
        """Gets the pod_name of this Pod.


        :return: The pod_name of this Pod.
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name: str):
        """Sets the pod_name of this Pod.


        :param pod_name: The pod_name of this Pod.
        :type pod_name: str
        """
        if pod_name is None:
            raise ValueError("Invalid value for `pod_name`, must not be `None`")  # noqa: E501

        self._pod_name = pod_name

    @property
    def container_name(self) -> str:
        """Gets the container_name of this Pod.


        :return: The container_name of this Pod.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name: str):
        """Sets the container_name of this Pod.


        :param container_name: The container_name of this Pod.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")  # noqa: E501

        self._container_name = container_name

    @property
    def image_name(self) -> str:
        """Gets the image_name of this Pod.


        :return: The image_name of this Pod.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name: str):
        """Sets the image_name of this Pod.


        :param image_name: The image_name of this Pod.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")  # noqa: E501

        self._image_name = image_name
